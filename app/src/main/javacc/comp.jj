options {
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  STATIC = true;

  LOOKAHEAD = 1;
  FORCE_LA_CHECK = false;
  DEBUG_LOOKAHEAD = false;

  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;

  SANITY_CHECK = true;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;

  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
}

PARSER_BEGIN(comp)
package com.example.myapplication.parser;
import com.example.myapplication.TokenAsignaciones.TokenAsignaciones;

public class comp {

}







PARSER_END(comp)

/**
 * Root Production
 */


/**
 * Matching parentheses production.
 */


////////////////////////////////////////////////////////////////////////////
///////////////////////////////TOKENS///////////////////////////////////////

// Establecer tokens y palabras reservadas
// Se separan en bloques que contienen tokens y palabras reservadas del mismo tipo

// Palabras reservadas
TOKEN:
{
    <MAIN: "main" > {System.out.println("MAIN-> "+image);} //1
    | <PROGRAMA: "program" > {System.out.println("PROGRAMA -> "+image);} //2
    | <VAR: "var" > {System.out.println("VAR -> "+image);} //3
    | <INT: "int" > {System.out.println("INT -> "+image);} //4
    | <FLOAT: "float" > {System.out.println("FLOAT -> "+image);} //5
    | <CHAR: "char" > {System.out.println("CHAR -> "+image);} //6
    | <VOID: "void" > {System.out.println("VOID -> "+image);} //7
    | <MODULE: "module" > {System.out.println("MODULE -> "+image);} //8
    | <RETURN: "return" > {System.out.println("RETURN -> "+image);} //9
    | <READ: "read" > {System.out.println("READ -> "+image);} //10
    | <WRITE: "write" > {System.out.println("WRITE -> "+image);} //11
    | <IF: "if" > {System.out.println("IF -> "+image);} //12
    | <THEN: "then" > {System.out.println("THEN -> "+image);} //13
    | <ELSE: "else" > {System.out.println("ELSE -> "+image);} //14
    | <WHILE: "while" > {System.out.println("WHILE -> "+image);} //15
    | <DO: "do" > {System.out.println("DO -> "+image);} //16
    | <FOR: "for" > {System.out.println("FOR -> "+image);} //17
    | <TO: "to" > {System.out.println("TO -> "+image);} //18
    | <CALL: "call" > {System.out.println("CALL -> "+image);} //19
}

// Separadores
TOKEN:
{
    <PARENIZQ: "(" > {System.out.println("PARENIZQ -> "+image);} //20
    | <PARENDER: ")" > {System.out.println("PARENDER -> "+image);} //21
    | <CURLYIZQ: "{" > {System.out.println("CURLYIZQ -> "+image);} //22
    | <CURLYDER: "}" > {System.out.println("CURLYDER -> "+image);} //23
    | <COMMA: "," > {System.out.println("COMMA -> "+image);} //24
    | <COLON: ":" > {System.out.println("COLON -> "+image);} //25
    | <SEMICOLON: ";" > {System.out.println("SEMICOLON -> "+image);} //26
}


// Operadores aritmeticos
TOKEN:
{
    <MAS: "+" > {System.out.println("MAS -> "+image);} //27
    | <MENOS: "-" > {System.out.println("MENOS -> "+image);} //28
    | <MULT: "*" > {System.out.println("MULT -> "+image);} //29
    | <DIV: "/" > {System.out.println("DIV -> "+image);} //30
}

// Operadores Lógicos
TOKEN:
{
    <ASIGNACION: "=" > {System.out.println("ASIGNACION -> "+image);} //31
    | <MASQUE: ">" > {System.out.println("MASQUE -> "+image);} //32
    | <MENOSQUE: "<" > {System.out.println("MENOSQUE -> "+image);} //33
    | <IGUAL: "==" > {System.out.println("IGUAL -> "+image);} //34
    | <NOIGUAL: "!=" > {System.out.println("NOIGUAL -> "+image);} //35
    | <AND: "&" > {System.out.println("AND -> "+image);} //36
    | <OR: "|" > {System.out.println("OR -> "+image);} //37
}

// Valores
TOKEN:
{
    <CTEI: (["0"-"9"])+ > {System.out.println("CTEI -> "+image);} //38
    | <CTEF: (["0"-"9"])+["."](["0"-"9"])+ > {System.out.println("CTEF -> "+image);} //39
    | <ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* > {System.out.println("ID -> "+image);} //40
    | <CTEC : "'"["a"-"z","A"-"Z","0"-"9"]"'" >//41

}
/// Tokens que se olvidaron
TOKEN:
{
    <BRACKETIZQ: "[" > {System.out.println("BRACKETIZQ -> "+image);} //42
    | <BRACKETDER: "]" > {System.out.println("BRACKETDER -> "+image);} //43
    | <COMILLA: "'" > {System.out.println("COMILLA -> "+image);} //44

}


SKIP :
{
    " " | "\r\n" | "\t" | "\n"
}


////////////////////////////////////////////////////////////////////////////
///////////////////////////////Gramática////////////////////////////////////


//////////////PROGRAMA/////////////////
void Programa() :
{
	TokenAsignaciones.SetTables();
	Token var;
}
{
    <PROGRAMA><ID><SEMICOLON>Mis_Vars_Global()Mis_Func()Main()<EOF>//


}

//////////////MIS_VARS_GLOBAL/////////////////
void Mis_Vars_Global() :
{}
{
        Vars_Global()
    |   Empty()
}

void Vars_Global() :
{}
{
    <VAR>Vars2_Global()
}

void Vars2_Global() :
{
	int td;
	Token var;
}
{
    Tipo()
    {
		td = token.kind;
	}
    var = <ID>
    {
		TokenAsignaciones.InsertarSimboloGlobal(var, td);
	}
    Dim()
    MasV_Global( td) <SEMICOLON> MasT_Global()
}


void MasV_Global( int tipo) :
{
    int td;
    Token var;
}
{
        <COMMA>
        var = <ID>
        {
            TokenAsignaciones.InsertarSimboloGlobal(var, tipo);
            td = tipo;
        }
        Dim()
        MasV_Global(td)
     | Empty()

}

void MasT_Global() :
{}
{
        Vars2_Global()
      | Empty()
}


//////////////MIS_VARS/////////////////
void Mis_Vars(Token func) :
{}
{
      Vars(func)
    | Empty()

}

void Vars(Token func) :
{}
{
    <VAR>Vars2(func)
}

void Vars2(Token func) :
{
	int td;
	Token var;
}
{
    (Tipo())
    {
		td = token.kind;
	}
    var = <ID>
    {
		TokenAsignaciones.InsertarSimbolo(var, td, func);
	}
    Dim()
    MasV( td, func ) <SEMICOLON> MasT(func)
}

void Dim() :
{}
{
        <BRACKETIZQ><CTEI><BRACKETDER>MasDim()
      | Empty()
}

void MasDim() :
{}
{
        <BRACKETIZQ><CTEI><BRACKETDER>
      | Empty()
}

void Dim_Expresion(Token func) :
{}
{
        <BRACKETIZQ>Expresion(func)<BRACKETDER>MasDim_Expresion(func)
      | Empty()
}

void MasDim_Expresion(Token func) :
{}
{
        <BRACKETIZQ>Expresion(func)<BRACKETDER>
      | Empty()
}

void MasV( int tipo, Token func ) :
{
    int td;
    Token var;
}
{
        <COMMA>
        var = <ID>
        {
            TokenAsignaciones.InsertarSimbolo(var, tipo, func);
            td = tipo;
        }

        MasV( td ,func)
     | Empty()

}

void MasT(Token func) :
{}
{
        Vars2(func)
      | Empty()
}



//////////////MIS_FUNC/////////////////
void Mis_Func() :
{}
{
        Funcion()
    |   Empty()
}

void Funcion() :
{
    int td;
	Token func;
}
{
    <MODULE>
    td = Func1()
    func = <ID>
    {
		TokenAsignaciones.InsertarFuncion(func, td);
	}
    <PARENIZQ>Func2(func)<PARENDER>

    Func3(func)
    <CURLYIZQ>
    Func4(func)
    <CURLYDER>Mas_F()
}

int Func1() :
{}
{
        Tipo_Retorno()
        {
            return token.kind;
        }
    |   Empty()
}

void Func2(Token func) :
{}
{
        Parametros_Func(func)
    |   Empty()
}

void Func3(Token func) :
{}
{
        Mis_Vars(func)
    |   Empty()
}

void Func4(Token func) :
{}
{
        Estatuto(func)
    |   Empty()
}

void Mas_F() :
{}
{
        Funcion()
    |   Empty()
}

//////////////TIPO_RETORNO/////////////////
void Tipo_Retorno() :
{}
{
        <INT>
    |   <FLOAT>
    |   <CHAR>
    |   <VOID>
}

//////////////MAIN/////////////////
void Main() :
{

	Token func;
}
{

     func =<MAIN>
     {
     		TokenAsignaciones.InsertarMain(func);
     }
     <PARENIZQ><PARENDER><CURLYIZQ>Main2(func)<CURLYDER>
}



void Main2(Token func) :
{}
{
        Estatuto(func)
    |   Empty()
}

//////////////PARAMETROS_FUNC/////////////////

void Parametros_Func( Token func) :
{
    Token var;
}
{
        Tipo()
        var = <ID>
        {
            TokenAsignaciones.checkVariable(var, func);
        }
        Dim_Expresion(func)
        Params_Func(func)
     |  Empty()
}

void Params_Func( Token func ) :
{}
{
        <COMMA> Parametros_Func(func)
     |  Empty()
}

//////////////PARAMETROS/////////////////

void Parametros( Token func) :
{
    Token var;
}
{
        Expresion(func)Params(func)
     |  Empty()
}

void Params( Token func ) :
{}
{
        <COMMA> Parametros(func)
     |  Empty()
}



/*
void Parametros( Token func) :
{
	int td;
	Token var;
}
{
    Tipo()
    {
		td = token.kind;
	}
    var = <ID>
    {
		TokenAsignaciones.InsertarSimbolo(var, td, func);
	}
    Params(func)
}

void Params( Token func ) :
{}
{
        <CURLYIZQ><CTEI><CURLYDER>Params2(func)
    |   Params2(func)
    |   Empty()
}

void Params2( Token func ) :
{}
{
    <OR><COMMA>Parametros(func)
}*/

//////////////LECTURA/////////////////
void Lectura(Token func) :
{}
{
    <READ><PARENIZQ>Lectura2(func)<PARENDER><SEMICOLON>
}

void Lectura2(Token func) :
{}
{
        Variable(func)Lectura3(func)


}
void Lectura3(Token func) :
{}
{
        <COMMA>Lectura2(func)
      | Empty()

}


//////////////ESCRITURA/////////////////
void Escritura(Token func) :
{}
{
    <WRITE><PARENIZQ>Escritura2(func)<PARENDER><SEMICOLON>
}

void Escritura2(Token func) :
{}
{
        Letrero()Escritura3(func)
    |   Expresion(func)Escritura3(func)
}

void Escritura3(Token func) :
{}
{
        <COMMA>Escritura2(func)
    |   Empty()
}

void Letrero() :
{}
{
    <COMILLA> <ID> <COMILLA>
}

//////////////ESTATUTO DE DECISION/////////////////
void Estatuto_De_Decision(Token func) :
{}
{
    <IF><PARENIZQ>Expresion(func)<PARENDER><THEN><CURLYIZQ>EDD2(func)<CURLYDER>EDD3(func)
}

void EDD2(Token func) :
{}
{
        Estatuto(func)
    |   Empty()
}

void EDD3(Token func) :
{}
{
        <ELSE><CURLYIZQ>EDD2(func)<CURLYDER>
    |   Empty()
}

//////////////ASIGNACION/////////////////

void Asignacion( Token func) :
{
Token var;
Token var2;
}
{
    Variable(func)<ASIGNACION>Expresion(func)Asignacion2(func)<SEMICOLON>
}

void Asignacion2(Token func) :
{}
{
        Asignacion(func)
     |  Empty()
}
//// throw new ParseException(res);
//// res = TokenAsignaciones.checkAsing(v1, v2, func);

/*
void Asignacion( Token func) :
{
	int td;
	Token var;
	Token var2;
}
{
    var = Variable()
    <ASIGNACION> var2= <ID>
    Asignacion2(var, var2, func)
}

void Asignacion2(Token v1, Token v2, Token func) :
{
	Token v3;
	String res;
	boolean imp = false;
}
{
        <PARENIZQ>Parametros(func)<PARENDER>
        {
        res = TokenAsignaciones.checkAsing(v1, v2, func);
        if(res != " ")
        {
            throw new ParseException(res);
            imp = true;
        }
        }

        Asignacion3(func)

    |   Expresion(func)
        v3 = Asignacion3(func)
        {
         res = TokenAsignaciones.checkAsing(v2, v3, func);
                if(res != " ")
        		{
        			System.out.println(res);
        			imp = true;
        		}
                res = TokenAsignaciones.checkAsing(v1, v2, func);
                if(res != " ")
        		{
        			System.out.println(res);
        			imp = true;
        		}
        }

}

Token Asignacion3(Token func) :
{
    Token v1;
}
{
        <SEMICOLON>
        v1 = Asignacion4(func)
        {
         return v1;
        }

}
Token Asignacion4(Token func) :
{
    Token v1;
    Token v2;
    String res;
    boolean imp = false;
}
{
        v1 = Expresion(func)
        v2 = Asignacion3(func)
        {
        res = TokenAsignaciones.checkAsing(v1, v2, func);

        		if(res != " ")
        		{
        			System.out.println(res);
        			imp = true;
        		}
                return v1;
        }
      | Empty() {return func;}
}*/

//////////////VARIABLE/////////////////
Token Variable(Token func) :
{
    Token var;
    String res;
    boolean imp = false;
}
{
    var = <ID>
    {
        res = TokenAsignaciones.checkVariable(var, func);

        if(res != " ")
        {
            throw new ParseException(res);
            imp = true;
        }
    }
    Dim_Expresion(func)
    {
    return var;
    }
}

//////////////TIPO/////////////////
void Tipo() :
{}
{
        <INT>
    |   <FLOAT>
    |   <CHAR>
}

//////////////TIPO/////////////////
void Retorno(Token func) :
{}
{
    <RETURN><PARENIZQ>Expresion(func)<PARENDER><SEMICOLON>
}

//////////////CONDICIONAL/////////////////
void Condicional(Token func) :
{}
{
    <WHILE><PARENIZQ>Expresion(func)<PARENDER><DO><CURLYIZQ>Condicional2(func)<CURLYDER>
}

void Condicional2(Token func) :
{}
{
        Estatuto(func)
    |   Empty()
}

//////////////NO_CONDICIONAL/////////////////
void No_condicional(Token func) :
{}
{
    <FOR>Variable(func)<ASIGNACION>Expresion(func)<TO>Expresion(func)<DO><CURLYIZQ>No_condicional2(func)<CURLYDER>
}

void No_condicional2(Token func) :
{}
{
        Estatuto(func)
    |   Empty()
}

//////////////Llamada/////////////////
Token Llamada( Token func ) :
{
	Token var;
    String res;
	boolean imp = false;
}
{
    <CALL>
    var = <ID>
    {
    res = TokenAsignaciones.checkFuncion(var);

    		if(res != " ")
    		{
    			System.out.println(res);
    			imp = true;
    		}
    }
    <PARENIZQ>Llamada2(func)<PARENDER>
    {return var;}
}

void Llamada2( Token func ) :
{}
{
        Parametros(func)
    |   Empty()
}

//////////////ESTATUTO/////////////////
void Estatuto(Token func) :
{}
{
        Asignacion(func)Estatuto2(func)
    |   Lectura(func)Estatuto2(func)
    |   Escritura(func)Estatuto2(func)
    |   Retorno(func)Estatuto2(func)
    |   Estatuto_De_Decision(func)Estatuto2(func)
    |   Condicional(func)Estatuto2(func)
    |   No_condicional(func)Estatuto2(func)
    |   Llamada(func)<SEMICOLON>Estatuto2(func)
}

void Estatuto2(Token func) :
{}
{
        Estatuto(func)
    |   Empty()
}

//////////////EXPRESION/////////////////
Token Expresion(Token func) :
{
    Token var;
}
{
    var = T_Exp(func)Expresion2(func)
    {return var;}
}

void Expresion2(Token func) :
{}
{
        <OR>Expresion(func)
    |   Empty()
}

//////////////T_Exp/////////////////
Token T_Exp(Token func) :
{
    Token var;
}
{
    var = G_Exp(func)
    T_Exp2(func)
    {return var;}
}

void T_Exp2(Token func) :
{}
{
        <AND>T_Exp(func)
    |   Empty()
}

//////////////G_Exp/////////////////
Token G_Exp(Token func) :
{
    Token var;
}
{
   var = M_Exp(func)G_Exp2(func)
   {return var;}
}

void G_Exp2(Token func) :
{}
{
        <MENOSQUE>M_Exp(func)
    |   <MASQUE>M_Exp(func)
    |   <IGUAL>M_Exp(func)
    |   <NOIGUAL>M_Exp(func)
    |   Empty()
}

//////////////M_Exp/////////////////
Token M_Exp(Token func) :
{
    Token var;
}
{
    var = T(func)
    M_Exp2(func)
    {return var;}
}

void M_Exp2(Token func) :
{}
{
        <MAS>M_Exp(func)
    |   <MENOS>M_Exp(func)
    |   Empty()
}

//////////////T(TERMINO)/////////////////
Token T(Token func) :
{
    Token var;
}
{
    var = F(func)
    T2(func)
    {return var;}
}

void T2(Token func) :
{}
{
        <MULT>T(func)
    |   <DIV>T(func)
    |   Empty()
}

//////////////F(FACTOR)/////////////////
Token F(Token func) :
{
    Token var;
}
{
        <PARENIZQ>
        var = Expresion(func)<PARENDER>
        {return var;}
    |   var = Variable(func)
        {return var;}
    |   var = Llamada(func)
        {return var;}
    |   var = F2()
        {return var;}
}

Token F2() :
{
    Token var;
}
{
        var = <CTEI>
        {return var;}
    |   var = <CTEF>
        {return var;}
    |   var = <ID>
        {return var;}
}


//////////////VACIO/////////////////
void Empty() :
{}
{
   {}

}

