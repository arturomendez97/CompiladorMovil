/* comp.java */
/* Generated By:JavaCC: Do not edit this line. comp.java */
package com.example.myapplication.parser;
import com.example.myapplication.TokenAsignaciones.TokenAsignaciones;

public class comp implements compConstants {

////////////////////////////////////////////////////////////////////////////
///////////////////////////////Gram√°tica////////////////////////////////////


//////////////PROGRAMA/////////////////
  static final public void Programa() throws ParseException {TokenAsignaciones.SetTables();
    Lectura();
    jj_consume_token(0);
  }

//////////////MIS_VARS_GLOBAL/////////////////
  static final public void Mis_Vars_Global() throws ParseException {
    Empty();
  }

  static final public void Vars_Global() throws ParseException {
    jj_consume_token(VAR);
    Vars2_Global();
  }

  static final public void Vars2_Global() throws ParseException {int td;
        Token var;
    Tipo();
td = token.kind;
    var = jj_consume_token(ID);
TokenAsignaciones.InsertarSimboloGlobal(var, td);
    Dim();
    MasV_Global(td);
    jj_consume_token(SEMICOLON);
    MasT_Global();
  }

  static final public void MasV_Global(int tipo) throws ParseException {int td;
    Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      var = jj_consume_token(ID);
TokenAsignaciones.InsertarSimboloGlobal(var, tipo);
            td = tipo;
      Dim();
      MasV_Global(td);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      Empty();
    }
  }

  static final public void MasT_Global() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:{
      Vars2_Global();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      Empty();
    }
  }

//////////////MIS_VARS/////////////////
  static final public void Mis_Vars(Token func) throws ParseException {
    Empty();
  }

  static final public void Vars(Token func) throws ParseException {
    jj_consume_token(VAR);
    Vars2(func);
  }

  static final public void Vars2(Token func) throws ParseException {int td;
        Token var;
    Tipo();
td = token.kind;
    var = jj_consume_token(ID);
TokenAsignaciones.InsertarSimbolo(var, td, func);
    Dim();
    MasV(td, func);
    jj_consume_token(SEMICOLON);
    MasT(func);
  }

  static final public void Dim() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRACKETIZQ:{
      jj_consume_token(BRACKETIZQ);
      jj_consume_token(CTEI);
      jj_consume_token(BRACKETDER);
      MasDim();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      Empty();
    }
  }

  static final public void MasDim() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRACKETIZQ:{
      jj_consume_token(BRACKETIZQ);
      jj_consume_token(CTEI);
      jj_consume_token(BRACKETDER);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      Empty();
    }
  }

  static final public void MasV(int tipo, Token func) throws ParseException {int td;
    Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      var = jj_consume_token(ID);
TokenAsignaciones.InsertarSimbolo(var, tipo, func);
            td = tipo;
      Dim();
      MasV(td ,func);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      Empty();
    }
  }

  static final public void MasT(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:{
      Vars2(func);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      Empty();
    }
  }

//////////////MIS_FUNC/////////////////
  static final public void Mis_Func() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
    case VOID:
    case MODULE:{
      Funcion();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      Empty();
    }
  }

  static final public void Funcion() throws ParseException {int td;
        Token func;
    td = Func1();
    jj_consume_token(MODULE);
    func = jj_consume_token(ID);
TokenAsignaciones.InsertarFuncion(func, td);
    jj_consume_token(PARENIZQ);
    Func2(func);
    jj_consume_token(PARENDER);
    Func3(func);
    jj_consume_token(BRACKETIZQ);
    Func4(func);
    jj_consume_token(BRACKETDER);
    Mas_F();
  }

  static final public int Func1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
    case VOID:{
      Tipo_Retorno();
{if ("" != null) return token.kind;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      Empty();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Func2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:{
      Parametros(func);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      Empty();
    }
  }

  static final public void Func3(Token func) throws ParseException {
    Mis_Vars(func);
  }

  static final public void Func4(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      Empty();
    }
  }

  static final public void Mas_F() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
    case VOID:
    case MODULE:{
      Funcion();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      Empty();
    }
  }

//////////////TIPO_RETORNO/////////////////
  static final public void Tipo_Retorno() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//////////////MAIN/////////////////
  static final public void Main() throws ParseException {Token func;
    func = jj_consume_token(MAIN);
TokenAsignaciones.InsertarMain(func);
    jj_consume_token(PARENIZQ);
    jj_consume_token(PARENDER);
    jj_consume_token(BRACKETIZQ);
    Main2(func);
    jj_consume_token(BRACKETDER);
  }

  static final public void Main2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      Empty();
    }
  }

//////////////PARAMETROS/////////////////
  static final public void Parametros(Token func) throws ParseException {int td;
        Token var;
    Tipo();
td = token.kind;
    var = jj_consume_token(ID);
TokenAsignaciones.InsertarSimbolo(var, td, func);
    Params(func);
  }

  static final public void Params(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRACKETIZQ:{
      jj_consume_token(BRACKETIZQ);
      jj_consume_token(CTEI);
      jj_consume_token(BRACKETDER);
      Params2(func);
      break;
      }
    case OR:{
      Params2(func);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      Empty();
    }
  }

  static final public void Params2(Token func) throws ParseException {
    jj_consume_token(OR);
    jj_consume_token(COMMA);
    Parametros(func);
  }

//////////////LECTURA/////////////////
  static final public void Lectura() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(PARENIZQ);
    Lectura2();
    jj_consume_token(PARENDER);
    jj_consume_token(SEMICOLON);
  }

  static final public void Lectura2() throws ParseException {
    Variable();
    Lectura3();
  }

  static final public void Lectura3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Lectura2();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      Empty();
    }
  }

//////////////ESCRITURA/////////////////
  static final public void Escritura(Token func) throws ParseException {
    jj_consume_token(WRITE);
    jj_consume_token(PARENIZQ);
    Escritura2(func);
    jj_consume_token(PARENDER);
    jj_consume_token(SEMICOLON);
  }

  static final public void Escritura2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      Escritura_L();
      break;
      }
    case PARENIZQ:
    case CTEI:
    case CTEF:{
      Escritura_V(func);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Escritura_L() throws ParseException {
    Letrero();
    Escritura_L2();
  }

  static final public void Escritura_V(Token func) throws ParseException {
    Expresion(func);
    Escritura_V2(func);
  }

  static final public void Escritura_L2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Escritura_L();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      Empty();
    }
  }

  static final public void Escritura_V2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Escritura_V(func);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      Empty();
    }
  }

  static final public void Letrero() throws ParseException {
    jj_consume_token(ID);
  }

//////////////ESTATUTO DE DECISION/////////////////
  static final public void Estatuto_De_Decision(Token func) throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PARENIZQ);
    Expresion(func);
    jj_consume_token(PARENDER);
    jj_consume_token(THEN);
    jj_consume_token(BRACKETIZQ);
    EDD2(func);
    jj_consume_token(BRACKETDER);
    EDD3(func);
  }

  static final public void EDD2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:{
      Estatuto(func);
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      Empty();
    }
  }

  static final public void EDD3(Token func) throws ParseException {
    Empty();
  }

//////////////ASIGNACION/////////////////
  static final public void Asignacion(Token func) throws ParseException {int td;
        Token var;
    var = Variable();
    jj_consume_token(ASIGNACION);
    Asignacion2(var, func);
  }

  static final public void Asignacion2(Token v1, Token func) throws ParseException {Token v2;
        Token v3;
        String res;
        boolean imp = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      v2 = jj_consume_token(ID);
      jj_consume_token(PARENIZQ);
      Parametros(func);
      jj_consume_token(PARENDER);
res = TokenAsignaciones.checkAsing(v1, v2, func);
        if(res != " ")
        {
            System.out.println(res);
            imp = true;
        }
      Asignacion3(func);
      break;
      }
    case PARENIZQ:
    case CTEI:
    case CTEF:{
      v2 = Expresion(func);
      v3 = Asignacion3(func);
res = TokenAsignaciones.checkAsing(v2, v3, func);
                if(res != " ")
                        {
                                System.out.println(res);
                                imp = true;
                        }
                res = TokenAsignaciones.checkAsing(v1, v2, func);
                if(res != " ")
                        {
                                System.out.println(res);
                                imp = true;
                        }
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Token Asignacion3(Token func) throws ParseException {Token v1;
    jj_consume_token(SEMICOLON);
    v1 = Asignacion4(func);
{if ("" != null) return v1;}
    throw new Error("Missing return statement in function");
  }

  static final public Token Asignacion4(Token func) throws ParseException {Token v1;
    Token v2;
    String res;
    boolean imp = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:{
      v1 = Expresion(func);
      v2 = Asignacion3(func);
res = TokenAsignaciones.checkAsing(v1, v2, func);

                        if(res != " ")
                        {
                                System.out.println(res);
                                imp = true;
                        }
                {if ("" != null) return v1;}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      Empty();
    }
    throw new Error("Missing return statement in function");
  }

//////////////VARIABLE/////////////////
  static final public Token Variable() throws ParseException {Token var;
    var = jj_consume_token(ID);
    Variable2();
    Variable2();
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void Variable2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRAIZQ:{
      jj_consume_token(BRAIZQ);
      jj_consume_token(CTEI);
      jj_consume_token(BRADER);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      Empty();
    }
  }

//////////////TIPO/////////////////
  static final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//////////////TIPO/////////////////
  static final public void Retorno(Token func) throws ParseException {
    jj_consume_token(RETURN);
    jj_consume_token(PARENIZQ);
    Expresion(func);
    jj_consume_token(PARENDER);
  }

//////////////CONDICIONAL/////////////////
  static final public void Condicional(Token func) throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(PARENIZQ);
    Expresion(func);
    jj_consume_token(PARENDER);
    jj_consume_token(DO);
    jj_consume_token(BRACKETIZQ);
    Condicional2(func);
    jj_consume_token(BRACKETDER);
  }

  static final public void Condicional2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:{
      Estatuto(func);
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      Empty();
    }
  }

//////////////NO_CONDICIONAL/////////////////
  static final public void No_condicional(Token func) throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(ID);
    Variable();
    jj_consume_token(ASIGNACION);
    Expresion(func);
    jj_consume_token(TO);
    Expresion(func);
    jj_consume_token(DO);
    jj_consume_token(BRACKETIZQ);
    No_condicional2(func);
    jj_consume_token(BRACKETDER);
  }

  static final public void No_condicional2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:{
      Estatuto(func);
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      Empty();
    }
  }

//////////////Llamada/////////////////
  static final public Token Llamada(Token func) throws ParseException {Token var;
    String res;
        boolean imp = false;
    var = jj_consume_token(ID);
res = TokenAsignaciones.checkFuncion(var);

                if(res != " ")
                {
                        System.out.println(res);
                        imp = true;
                }
    jj_consume_token(PARENIZQ);
    Llamada2(func);
    jj_consume_token(PARENDER);
    jj_consume_token(SEMICOLON);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void Llamada2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:{
      Parametros(func);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      Empty();
    }
  }

//////////////ESTATUTO/////////////////
  static final public void Estatuto(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      Asignacion(func);
      Estatuto2(func);
      break;
      }
    case READ:{
      Lectura();
      Estatuto2(func);
      break;
      }
    case WRITE:{
      Escritura(func);
      Estatuto2(func);
      break;
      }
    case RETURN:{
      Retorno(func);
      Estatuto2(func);
      break;
      }
    case IF:{
      Estatuto_De_Decision(func);
      Estatuto2(func);
      break;
      }
    case WHILE:{
      Condicional(func);
      Estatuto2(func);
      break;
      }
    case FOR:{
      No_condicional(func);
      Estatuto2(func);
      break;
      }
    case PARENIZQ:
    case CTEI:
    case CTEF:{
      Expresion(func);
      Estatuto2(func);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Estatuto2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      Empty();
    }
  }

//////////////EXPRESION/////////////////
  static final public Token Expresion(Token func) throws ParseException {Token var;
    var = T_Exp(func);
    Expresion2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void Expresion2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      jj_consume_token(OR);
      Expresion(func);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      Empty();
    }
  }

//////////////T_Exp/////////////////
  static final public Token T_Exp(Token func) throws ParseException {Token var;
    var = G_Exp(func);
    T_Exp2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void T_Exp2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      T_Exp(func);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      Empty();
    }
  }

//////////////G_Exp/////////////////
  static final public Token G_Exp(Token func) throws ParseException {Token var;
    var = M_Exp(func);
    G_Exp2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void G_Exp2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MENOSQUE:{
      jj_consume_token(MENOSQUE);
      M_Exp(func);
      break;
      }
    case MASQUE:{
      jj_consume_token(MASQUE);
      M_Exp(func);
      break;
      }
    case IGUAL:{
      jj_consume_token(IGUAL);
      M_Exp(func);
      break;
      }
    case NOIGUAL:{
      jj_consume_token(NOIGUAL);
      M_Exp(func);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      Empty();
    }
  }

//////////////M_Exp/////////////////
  static final public Token M_Exp(Token func) throws ParseException {Token var;
    var = T(func);
    M_Exp2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void M_Exp2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAS:{
      jj_consume_token(MAS);
      M_Exp(func);
      break;
      }
    case MENOS:{
      jj_consume_token(MENOS);
      M_Exp(func);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      Empty();
    }
  }

//////////////T(TERMINO)/////////////////
  static final public Token T(Token func) throws ParseException {Token var;
    var = F(func);
    T2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void T2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULT:{
      jj_consume_token(MULT);
      T(func);
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      T(func);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      Empty();
    }
  }

//////////////F(FACTOR)/////////////////
  static final public Token F(Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARENIZQ:{
      jj_consume_token(PARENIZQ);
      var = Expresion(func);
      jj_consume_token(PARENDER);
{if ("" != null) return var;}
      break;
      }
    case ID:{
      var = Variable();
{if ("" != null) return var;}
      break;
      }
    case CTEI:
    case CTEF:{
      var = F2();
{if ("" != null) return var;}
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token F2() throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CTEI:{
      var = jj_consume_token(CTEI);
{if ("" != null) return var;}
      break;
      }
    case CTEF:{
      var = jj_consume_token(CTEF);
{if ("" != null) return var;}
      break;
      }
    case ID:{
      var = jj_consume_token(ID);
{if ("" != null) return var;}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//////////////VACIO/////////////////
  static final public void Empty() throws ParseException {

  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x70,0x200000,0x200000,0x800000,0x70,0x1f0,0xf0,0x70,0xa9e00,0x1f0,0xf0,0xa9e00,0x200000,0x800000,0x80000,0x800000,0x800000,0xa9e00,0x80000,0x80000,0x0,0x70,0xa9e00,0xa9e00,0x70,0xa9e00,0xa9e00,0x0,0x0,0x80000000,0xc000000,0x30000000,0x80000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x0,0xe0,0x10,0x0,0xe0,0x0,0x0,0xe0,0xe0,0xe0,0x200,0x0,0xe0,0xe0,0x0,0xe0,0xe0,0x10,0x8,0x7,0x0,0x0,0xe0,0xe0,};
   }

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new compTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
