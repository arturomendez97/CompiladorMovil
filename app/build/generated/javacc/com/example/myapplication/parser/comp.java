/* comp.java */
/* Generated By:JavaCC: Do not edit this line. comp.java */
package com.example.myapplication.parser;
import com.example.myapplication.TokenAsignaciones.TokenAsignaciones;
import com.example.myapplication.TokenAsignaciones.Quadruple;


public class comp implements compConstants {

////////////////////////////////////////////////////////////////////////////
///////////////////////////////Gram√°tica////////////////////////////////////


//////////////PROGRAMA/////////////////
  static final public void Programa() throws ParseException {//TokenAsignaciones.SetTables();
        ///cuboSemantico.constructor();
        Token var;
//Crea goto a main
        creaCuadruploGoto();
    jj_consume_token(PROGRAMA);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    Mis_Vars_Global();
    Mis_Func();
    Main();
    creaCuadruploEnd();
    jj_consume_token(0);
TokenAsignaciones.printCuadruplos();
        System.out.println("Pila Saltos: " + TokenAsignaciones.returnPilaSaltos());
        System.out.println("Pila VP: " + TokenAsignaciones.returnPilaVP());
        TokenAsignaciones.comienzaMaquinaVirtual();
        reiniciaTodo();
  }

  static final public void reiniciaTodo() throws ParseException {
TokenAsignaciones.emptyPilaOP();
         TokenAsignaciones.emptyPilaVP();
         TokenAsignaciones.emptyCuadruplos();
         // RESETEAR TODOS LOS CONTADORES
         TokenAsignaciones.resetContsGlobal();
         TokenAsignaciones.resetContsLocal();
         TokenAsignaciones.resetContsTemporal();
         TokenAsignaciones.resetContsConstantes();
         TokenAsignaciones.emptyPilaSaltos();
         TokenAsignaciones.resetContCuadruplos();
         //TokenAsignaciones.printNumVarsGlobal();
         TokenAsignaciones.resetNumVarsGlobal();
  }

  static final public void creaCuadruploEnd() throws ParseException {
Quadruple quad = new Quadruple("END", null, null, null);
         TokenAsignaciones.meterCuadruplo(quad);
         TokenAsignaciones.subeContCuadruplos();
  }

//////////////MIS_VARS_GLOBAL/////////////////
  static final public void Mis_Vars_Global() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      Vars_Global();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      Empty();
    }
  }

  static final public void Vars_Global() throws ParseException {
    jj_consume_token(VAR);
    Vars2_Global();
  }

  static final public void Vars2_Global() throws ParseException {int td;
        Token var;
    td = Tipo();
TokenAsignaciones.aumentaVarFuncGlobal(td);
    var = jj_consume_token(ID);
TokenAsignaciones.InsertarSimboloGlobal(var, td);
    Dim();
    MasV_Global(td);
    jj_consume_token(SEMICOLON);
    MasT_Global();
  }

  static final public void MasV_Global(int td) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      var = jj_consume_token(ID);
TokenAsignaciones.aumentaVarFuncGlobal(td);
            TokenAsignaciones.InsertarSimboloGlobal(var, td);
      Dim();
      MasV_Global(td);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      Empty();
    }
  }

  static final public void MasT_Global() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:{
      Vars2_Global();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      Empty();
    }
  }

//////////////MIS_VARS/////////////////
  static final public void Mis_Vars(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      Vars(func);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      Empty();
    }
  }

  static final public void Vars(Token func) throws ParseException {
    jj_consume_token(VAR);
    Vars2(func);
  }

  static final public void Vars2(Token func) throws ParseException {int td;
        Token var;
        String res;
    td = Tipo();
TokenAsignaciones.aumentaVarFunc(td, func);
    var = jj_consume_token(ID);
res = TokenAsignaciones.InsertarSimbolo(var, td, func);

                if(res != " ")
                {
                    reiniciaTodo();
                    {if (true) throw new ParseException(res);}
                }
    Dim();
    MasV(td, func);
    jj_consume_token(SEMICOLON);
    MasT(func);
  }

  static final public void Dim() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRACKETIZQ:{
      jj_consume_token(BRACKETIZQ);
      jj_consume_token(CTEI);
      jj_consume_token(BRACKETDER);
      MasDim();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      Empty();
    }
  }

  static final public void MasDim() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRACKETIZQ:{
      jj_consume_token(BRACKETIZQ);
      jj_consume_token(CTEI);
      jj_consume_token(BRACKETDER);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      Empty();
    }
  }

  static final public void Dim_Expresion(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRACKETIZQ:{
      jj_consume_token(BRACKETIZQ);
      Expresion(func);
      jj_consume_token(BRACKETDER);
      MasDim_Expresion(func);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      Empty();
    }
  }

  static final public void MasDim_Expresion(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BRACKETIZQ:{
      jj_consume_token(BRACKETIZQ);
      Expresion(func);
      jj_consume_token(BRACKETDER);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      Empty();
    }
  }

  static final public void MasV(int td, Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      var = jj_consume_token(ID);
TokenAsignaciones.aumentaVarFunc(td, func);
            TokenAsignaciones.InsertarSimbolo(var, td, func);
      MasV(td ,func);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      Empty();
    }
  }

  static final public void MasT(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:{
      Vars2(func);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      Empty();
    }
  }

//////////////MIS_FUNC/////////////////
  static final public void Mis_Func() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MODULE:{
      Funcion();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      Empty();
    }
  }

  static final public void Funcion() throws ParseException {int td;
        Token func;
        String res;
    jj_consume_token(MODULE);
    td = Func1();
    func = jj_consume_token(ID);
res = TokenAsignaciones.InsertarFuncion(func, td, TokenAsignaciones.getContCuadruplos());
        TokenAsignaciones.InsertarVarReturnFuncion(func, td);
        TokenAsignaciones.aumentaVarFuncGlobal(td);
                if(res != " ")
                {
                    reiniciaTodo();
                    {if (true) throw new ParseException(res);}
                }
    jj_consume_token(PARENIZQ);
    Func2(func);
    jj_consume_token(PARENDER);
    Func3(func);
    jj_consume_token(CURLYIZQ);
    Func4(func);
    jj_consume_token(CURLYDER);
//RESETEAR LOS CONTS
        TokenAsignaciones.resetContsLocal();
        TokenAsignaciones.resetContsTemporal();
        creaCuadruploEndFunc();
        //TokenAsignaciones.printNumVars(func);

    Mas_F();
  }

  static final public void creaCuadruploEndFunc() throws ParseException {
Quadruple quad = new Quadruple("ENDFUNC", null, null, null );
        TokenAsignaciones.meterCuadruplo(quad);
        TokenAsignaciones.subeContCuadruplos();
  }

  static final public int Func1() throws ParseException {int td;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
    case VOID:{
      td = Tipo_Retorno();
{if ("" != null) return td;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      Empty();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Func2(Token func) throws ParseException {
    Parametros_Func(func);
  }

  static final public void Func3(Token func) throws ParseException {
    Mis_Vars(func);
  }

  static final public void Func4(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case CALL:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      Empty();
    }
  }

  static final public void Mas_F() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MODULE:{
      Funcion();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      Empty();
    }
  }

//////////////TIPO_RETORNO/////////////////
  static final public int Tipo_Retorno() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
{if ("" != null) return 4;}
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
{if ("" != null) return 5;}
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
{if ("" != null) return 6;}
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
{if ("" != null) return 7;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//////////////MAIN/////////////////
  static final public void Main() throws ParseException {Token func;
rellenaCuadruploGoto();
    func = jj_consume_token(MAIN);
TokenAsignaciones.InsertarMain(func);
    jj_consume_token(PARENIZQ);
    jj_consume_token(PARENDER);
    jj_consume_token(CURLYIZQ);
    Main2(func);
    jj_consume_token(CURLYDER);
  }

  static final public void Main2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case CALL:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      Empty();
    }
  }

//////////////PARAMETROS_FUNC/////////////////
  static final public 
void Parametros_Func(Token func) throws ParseException {int td;
    Token var;
    String res;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:{
      td = Tipo();
TokenAsignaciones.aumentaVarFunc(td, func);
      var = jj_consume_token(ID);
TokenAsignaciones.InsertarSimbolo(var, td, func);
            res = TokenAsignaciones.InsertarParametrosFunc(td, func);
            if (res != " ")
            {
                reiniciaTodo();
                {if (true) throw new ParseException(res);}
            }
      Dim_Expresion(func);
      Params_Func(func);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      Empty();
    }
  }

  static final public void Params_Func(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Parametros_Func(func);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      Empty();
    }
  }

//////////////PARAMETROS/////////////////
  static final public 
void Parametros(Token func, Token funcLlamada) throws ParseException {Token var;
    Token parentesis = new Token();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CALL:
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:
    case CTEC:{
parentesis.image = "(";
            parentesis.kind = 20;
            TokenAsignaciones.pushPilaOP(parentesis);
      Expresion(func);
TokenAsignaciones.popPilaOP();
      creaCuadruploParametro(func, funcLlamada);
      Params(func, funcLlamada);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      Empty();
    }
  }

  static final public void creaCuadruploParametro(Token func, Token funcLlamada) throws ParseException {Token arg1;
     Token par = new Token();
     int aux;
     int contParams;
arg1 = TokenAsignaciones.popPilaVP();
         contParams = TokenAsignaciones.getContParams();
         par.image = "par" + Integer.toString(contParams);


         //El if es para cuando es un temporal o una constante
         if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 | arg1.kind == 38 | arg1.kind == 39 | arg1.kind == 41)
         {
             aux = arg1.kind;
         }
         else
         {
             aux = TokenAsignaciones.getType(arg1, func);
         }


         arg1.image = tokenToDir(arg1, func);
         arg1.kind = aux;

         //System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + TokenAsignaciones.getContParams());

         if (!TokenAsignaciones.checaTipoParams(aux, funcLlamada))
         {
            reiniciaTodo();
            {if (true) throw new ParseException("El parametro enviado a la funcion " + funcLlamada + " no es del mismo tipo que el declarado o es un parametro extra");}
         }


         Quadruple quad = new Quadruple("PARAM", arg1, null, par);
         TokenAsignaciones.meterCuadruplo(quad);
         TokenAsignaciones.subeContCuadruplos();

             //quad.print();

  }

  static final public void Params(Token func, Token funcLlamada) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Parametros(func, funcLlamada);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      Empty();
    }
  }

//////////////LECTURA/////////////////
  static final public void Lectura(Token func) throws ParseException {Token op;
    op = jj_consume_token(READ);
    jj_consume_token(PARENIZQ);
    Lectura2(func, op);
    jj_consume_token(PARENDER);
    jj_consume_token(SEMICOLON);
  }

  static final public void Lectura2(Token func, Token op) throws ParseException {
    Variable(func);
    creaCuadruploLectura(op, func);
    Lectura3(func, op);
  }

  static final public void Lectura3(Token func, Token op) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Lectura2(func, op);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      Empty();
    }
  }

  static final public void creaCuadruploLectura(Token op, Token func) throws ParseException {Token arg1;
     int aux;
arg1 = TokenAsignaciones.popPilaVP();

    //Entra qui si el argumento es un temporal, porque su tipo
    if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 )
    {
        aux = arg1.kind;
    }
    else{
        aux = TokenAsignaciones.getType(arg1, func);
        }

    arg1.image = tokenToDir(arg1, func);
    arg1.kind = aux;

    Quadruple quad = new Quadruple(op.image, arg1, null, null);
    TokenAsignaciones.meterCuadruplo(quad);
    TokenAsignaciones.subeContCuadruplos();
    //quad.print();

  }

//////////////ESCRITURA/////////////////
  static final public void Escritura(Token func) throws ParseException {Token op;
    op = jj_consume_token(WRITE);
    jj_consume_token(PARENIZQ);
    Escritura2(op, func);
    jj_consume_token(PARENDER);
    jj_consume_token(SEMICOLON);
  }

  static final public void Escritura2(Token op, Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CTEC:{
      var = jj_consume_token(CTEC);
var.image = TokenAsignaciones.InsertarConstante(var.image, TokenAsignaciones.getContConst(var.kind));
            TokenAsignaciones.pushPilaVP(var);
            creaCuadruploEscritura(op, func);
      Escritura3(op, func);
      break;
      }
    case CALL:
    case PARENIZQ:
    case CTEI:
    case CTEF:
    case ID:{
      Expresion(func);
creaCuadruploEscritura(op, func);
      Escritura3(op, func);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Escritura3(Token op, Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Escritura2(op, func);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      Empty();
    }
  }

  static final public void creaCuadruploEscritura(Token op, Token func) throws ParseException {Token arg1;
     int aux;
arg1 = TokenAsignaciones.popPilaVP();

         if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 | arg1.kind == 38 | arg1.kind == 39 | arg1.kind == 41)
         {
             aux = arg1.kind;
         }
         else{
             aux = TokenAsignaciones.getType(arg1, func);
         }

         arg1.image = tokenToDir(arg1, func);
         arg1.kind = aux;


         Quadruple quad = new Quadruple(op.image, null, null, arg1);
         TokenAsignaciones.meterCuadruplo(quad);
             TokenAsignaciones.subeContCuadruplos();

             //quad.print();

  }

/*
void Letrero() :
{}
{
    <COMILLA> <ID> <COMILLA>
}
*/

//////////////ESTATUTO DE DECISION/////////////////
  static final public void Estatuto_De_Decision(Token func) throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PARENIZQ);
    Expresion(func);
System.out.println("VECTOR POLACO DESPUES DE LA EXP: " + TokenAsignaciones.returnPilaVP());
    creaCuadruploGotoF(func);
    jj_consume_token(PARENDER);
    jj_consume_token(THEN);
    jj_consume_token(CURLYIZQ);
    EDD2(func);
    jj_consume_token(CURLYDER);
    rellenaCuadruploGotoF();
    EDD3(func);
    rellenaCuadruploGoto();
  }

  static final public void rellenaCuadruploGotoF() throws ParseException {int cuadruploActual;
    int cuadruploModificar;
    int cuadruploExtra;
cuadruploActual = TokenAsignaciones.getContCuadruplos();
        //Haces pop de los √∫ltimos dos, y agarras el de mero atras
        cuadruploExtra = TokenAsignaciones.popPilaSaltos();
        cuadruploModificar = TokenAsignaciones.popPilaSaltos();
        //Regresas el otro
        TokenAsignaciones.pushPilaSaltos(cuadruploExtra);
        TokenAsignaciones.completaGOTO(cuadruploModificar, cuadruploActual);
  }

  static final public void rellenaCuadruploGoto() throws ParseException {int cuadruploActual;
    int cuadruploModificar;
cuadruploActual = TokenAsignaciones.getContCuadruplos();
        cuadruploModificar = TokenAsignaciones.popPilaSaltos();
        TokenAsignaciones.completaGOTO(cuadruploModificar, cuadruploActual);
  }

  static final public void creaCuadruploGotoF(Token func) throws ParseException {Token arg1;
     int aux;
arg1 = TokenAsignaciones.popPilaVP();


         if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 | arg1.kind == 38 | arg1.kind == 39 | arg1.kind == 41)
         {
             aux = arg1.kind;
         }
         else{
             aux = TokenAsignaciones.getType(arg1, func);
         }

         arg1.image = tokenToDir(arg1, func);
         arg1.kind = aux;

         if ( aux != 47)
         {
             reiniciaTodo();
             {if (true) throw new ParseException("La expresion dentro del if tiene que ser bool, recibio un tipo:  " + aux);}
         }


         Quadruple quad = new Quadruple("GOTOF", arg1, null, null );
         TokenAsignaciones.meterCuadruplo(quad);
         TokenAsignaciones.pushPilaSaltos(TokenAsignaciones.getContCuadruplos());
         TokenAsignaciones.subeContCuadruplos();


             //quad.print();

  }

  static final public void creaCuadruploGoto() throws ParseException {int aux;
Quadruple quad = new Quadruple("GOTO", null, null, null );
         TokenAsignaciones.meterCuadruplo(quad);
         TokenAsignaciones.pushPilaSaltos(TokenAsignaciones.getContCuadruplos());
         TokenAsignaciones.subeContCuadruplos();
  }

  static final public void EDD2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case CALL:
    case ID:{
      Estatuto(func);
creaCuadruploGoto();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      Empty();
creaCuadruploGoto();
    }
  }

  static final public void EDD3(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(CURLYIZQ);
      EDD4(func);
      jj_consume_token(CURLYDER);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      Empty();
    }
  }

  static final public void EDD4(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case CALL:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      Empty();
    }
  }

//////////////ASIGNACION/////////////////
  static final public 
Token Asignacion(Token func) throws ParseException {Token op;
    Token var;
    var = Variable(func);
    op = jj_consume_token(ASIGNACION);
    Expresion(func);
    creaCuadruploAsignacion(op, func);
    jj_consume_token(SEMICOLON);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

//////////////CREA CUADRUPLO GENERICO/////////////////
  static final public 

void creaCuadruploAsignacion(Token op, Token func) throws ParseException {Token arg1  = new Token();
     Token arg2  = new Token();
     Token tAux;
     Token tAux2;
     int aux;
     int aux2;
try {
            tAux = TokenAsignaciones.popPilaVP();
            tAux2 = TokenAsignaciones.popPilaVP();
         }
     catch (Exception e)
     {
         reiniciaTodo();
                          {if (true) throw new ParseException("Se est\u00c3\u00a1 intentando llamar a una funcion void en una asignacion");}
     }


         arg1.image = tAux.image;
         arg1.kind = tAux.kind;

         arg2.image = tAux2.image;
         arg2.kind = tAux2.kind;

         System.out.println("arg1 image: " + arg1.image);

         System.out.println("arg1 kind: " + arg1.kind);




         //El if es para cuando es un temporal o una constante
         if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 | arg1.kind == 38 | arg1.kind == 39 | arg1.kind == 41)
         {
             aux = arg1.kind;
         }
         else
         {
             aux = TokenAsignaciones.getType(arg1, func);
         }

         if ( arg2.kind == 4 | arg2.kind == 5 | arg2.kind == 6 | arg2.kind == 47 | arg2.kind == 38 | arg2.kind == 39 | arg2.kind == 41)
         {
             aux2 = arg2.kind;
         }
         else{
             aux2 = TokenAsignaciones.getType(arg2, func);
         }

         System.out.println("aux: " + aux);

         //System.out.println("aux2: " + aux2);


         if (TokenAsignaciones.getCuboType(aux2,aux,op.image) == 0)
             {
                 reiniciaTodo();
                 {if (true) throw new ParseException("Los argumentos: " + arg1.image + " y " + arg2.image + " no son compatibles.");}
             }

         arg1.image = tokenToDir(arg1, func);
         arg1.kind = aux;
         arg2.image = tokenToDir(arg2, func);
         arg2.kind = aux;


         Quadruple quad = new Quadruple(op.image, arg1, null, arg2);
         TokenAsignaciones.meterCuadruplo(quad);
         TokenAsignaciones.subeContCuadruplos();
  }

//////////////VARIABLE/////////////////
  static final public Token Variable(Token func) throws ParseException {Token var;
    String res;
    boolean imp = false;
    var = jj_consume_token(ID);
res = TokenAsignaciones.checkVariable(var, func);

        if(res != " ")
        {
            reiniciaTodo();
            {if (true) throw new ParseException(res);}
            imp = true;
        }

        TokenAsignaciones.pushPilaVP(var);
        //System.out.println(TokenAsignaciones.returnPilaVP());

    Dim_Expresion(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

//////////////TIPO/////////////////
  static final public int Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
{if ("" != null) return 4;}
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
{if ("" != null) return 5;}
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
{if ("" != null) return 6;}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//////////////RETORNO/////////////////
  static final public void Retorno(Token func) throws ParseException {Token op;
    op = jj_consume_token(RETURN);
    jj_consume_token(PARENIZQ);
    Expresion(func);
    jj_consume_token(PARENDER);
    jj_consume_token(SEMICOLON);
    validaReturn(func);
    creaCuadruploRetorno(op, func);
  }

  static final public void validaReturn(Token func) throws ParseException {
if(!TokenAsignaciones.getTypeFunc(func))
        {
            reiniciaTodo();
            {if (true) throw new ParseException("La funcion " + func.image + " es de tipo void, asi que no puede tener un return");}
        }
  }

  static final public void creaCuadruploRetorno(Token op, Token func) throws ParseException {Token arg1;
     int aux;
arg1 = TokenAsignaciones.popPilaVP();

         if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 | arg1.kind == 38 | arg1.kind == 39 | arg1.kind == 41)
         {
             aux = arg1.kind;
         }
         else{
             aux = TokenAsignaciones.getType(arg1, func);
         }

         arg1.image = tokenToDir(arg1, func);
         arg1.kind = aux;

         if (TokenAsignaciones.getfunctipo(func) != aux)
         {
             reiniciaTodo();
             {if (true) throw new ParseException("Lo que se regresa en la funci\u00c3\u00b3n " + func + " debe de ser del mismo tipo que la funci\u00c3\u00b3n");}
         }


         Quadruple quad = new Quadruple(op.image, arg1, null, func);
         TokenAsignaciones.meterCuadruplo(quad);
         TokenAsignaciones.subeContCuadruplos();

             //quad.print();

  }

//////////////CONDICIONAL/////////////////
  static final public void Condicional(Token func) throws ParseException {
TokenAsignaciones.pushPilaSaltos(TokenAsignaciones.getContCuadruplos());
    jj_consume_token(WHILE);
    jj_consume_token(PARENIZQ);
    Expresion(func);
    creaCuadruploGotoF(func);
    jj_consume_token(PARENDER);
    jj_consume_token(DO);
    jj_consume_token(CURLYIZQ);
    Condicional2(func);
    jj_consume_token(CURLYDER);
    creaYRellenaGoto(func);
    rellenaCuadruploGotoFCondicional();
  }

  static final public void Condicional2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case CALL:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      Empty();
    }
  }

  static final public void creaYRellenaGoto(Token func) throws ParseException {int aux;
     int cuadruploActual;
     int cuadruploExtra;
     int resultado;
     Token aux2 = new Token();
//Haces pop de los √∫ltimos dos, y agarras el de mero atras
         cuadruploExtra = TokenAsignaciones.popPilaSaltos();
         resultado = TokenAsignaciones.popPilaSaltos();
         //Regresas el otro
         TokenAsignaciones.pushPilaSaltos(cuadruploExtra);

         //A la hora de generar el cuadruplo, ya sabemos a donde lleva. As√≠ que se lo ponemos de una vez
         aux2.image = Integer.toString(resultado);
         Quadruple quad = new Quadruple("GOTO", null, null, aux2 );
         TokenAsignaciones.meterCuadruplo(quad);
         TokenAsignaciones.subeContCuadruplos();
  }

  static final public void rellenaCuadruploGotoFCondicional() throws ParseException {int cuadruploActual;
    int cuadruploModificar;
cuadruploActual = TokenAsignaciones.getContCuadruplos();
        cuadruploModificar = TokenAsignaciones.popPilaSaltos();
        TokenAsignaciones.completaGOTO(cuadruploModificar, cuadruploActual);
  }

  static final public void rellenaCuadruploGotoCondicional() throws ParseException {int cuadruploActual;
    int cuadruploModificar;
cuadruploActual = TokenAsignaciones.getContCuadruplos();
        cuadruploModificar = TokenAsignaciones.popPilaSaltos();
        TokenAsignaciones.completaGOTO(cuadruploModificar, cuadruploActual);
  }

//////////////NO_CONDICIONAL/////////////////
  static final public void No_condicional(Token func) throws ParseException {Token var;
    jj_consume_token(FOR);
    var = Asignacion(func);
TokenAsignaciones.pushPilaSaltos(TokenAsignaciones.getContCuadruplos());
    jj_consume_token(TO);
    Expresion(func);
    creaCuadruploGotoF(func);
    jj_consume_token(DO);
    jj_consume_token(CURLYIZQ);
    No_condicional2(func);
    creaCuadruploSuma(var, func);
    creaYRellenaGoto(func);
    rellenaCuadruploGotoFCondicional();
    jj_consume_token(CURLYDER);
  }

  static final public void creaCuadruploSuma(Token var, Token func) throws ParseException {Token aux = new Token();
aux.image = "1";
        Quadruple quad = new Quadruple("+", var, aux, var );
        TokenAsignaciones.meterCuadruplo(quad);
        TokenAsignaciones.subeContCuadruplos();
  }

  static final public void No_condicional2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case CALL:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      Empty();
    }
  }

//////////////Llamada/////////////////
  static final public Token Llamada(Token func) throws ParseException {Token funcLlamada;
    String res;
        boolean imp = false;
    jj_consume_token(CALL);
    funcLlamada = jj_consume_token(ID);
res = TokenAsignaciones.checkFuncion(funcLlamada);

        if(res != " ")
        {
            reiniciaTodo();
            {if (true) throw new ParseException(res);}
            imp = true;
        }
        creaCuadruploEra(funcLlamada);
    jj_consume_token(PARENIZQ);
    Llamada2(func, funcLlamada);
    jj_consume_token(PARENDER);
    creaCuadruploGoSub(funcLlamada);
//Checa si la funci√≥n no es void.
        if (TokenAsignaciones.getTypeFunc(funcLlamada))
        {
            TokenAsignaciones.pushPilaVP(funcLlamada);
        }
        else {
            //Si es void, checa que no se le est√© asignando a nada.
                    if (TokenAsignaciones.peekPilaOP() != null)
                    {
                        reiniciaTodo();
                        {if (true) throw new ParseException("La funcion " + funcLlamada + " es void. No se puede utilizar en una asignacion o expresion porque no regresa nada.");}
                    }
            }
{if ("" != null) return funcLlamada;}
    throw new Error("Missing return statement in function");
  }

/*
void creaCuadruploRecibirValor( Token funcLlamada, Token func) :
{
     Token arg1;
     Token arg2;
     Token op  = new Token();
     int aux;
     int aux2;
}
{
    {
         arg1 = TokenAsignaciones.popPilaVP();
         arg2 = funcLlamada;
        op.image = "=";


         //El if es para cuando es un temporal o una constante
         if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 | arg1.kind == 38 | arg1.kind == 39 | arg1.kind == 41)
         {
             aux = arg1.kind;
         }
         else
         {
             aux = TokenAsignaciones.getType(arg1, func);
         }

         if ( arg2.kind == 4 | arg2.kind == 5 | arg2.kind == 6 | arg2.kind == 47 | arg2.kind == 38 | arg2.kind == 39 | arg2.kind == 41)
         {
             aux2 = arg2.kind;
         }
         else{
             aux2 = TokenAsignaciones.getType(arg2, func);
         }

         //System.out.println("aux: " + aux);

         //System.out.println("aux2: " + aux2);

         if (TokenAsignaciones.getCuboType(aux2,aux,op.image) == 0)
             {
                 throw new ParseException("Los argumentos: " + arg1.image + " y " + arg2.image + " no son compatibles.");
             }

         arg1.image = tokenToDir(arg1, func);
         arg1.kind = aux;
         arg2.image = tokenToDir(arg2, func);
         arg2.kind = aux;


         Quadruple quad = new Quadruple(op.image, arg1, null, arg2);
         TokenAsignaciones.meterCuadruplo(quad);
             TokenAsignaciones.subeContCuadruplos();

             //quad.print();
    }
}

*/
  static final public void creaCuadruploGoSub(Token funcLlamada) throws ParseException {Token aux = new Token();
aux.image = Integer.toString(TokenAsignaciones.getInitialAddress(funcLlamada));
         Quadruple quad = new Quadruple("GOSUB", funcLlamada, null, aux );
         TokenAsignaciones.meterCuadruplo(quad);
         TokenAsignaciones.subeContCuadruplos();
  }

  static final public void creaCuadruploEra(Token var) throws ParseException {int aux;
Quadruple quad = new Quadruple("ERA", null, null, var);
         TokenAsignaciones.meterCuadruplo(quad);
         //System.out.print("EL CUADRUPLO DEL ERA: "  + TokenAsignaciones.getContCuadruplos());
         TokenAsignaciones.subeContCuadruplos();
  }

  static final public void Llamada2(Token func , Token funcLlamada) throws ParseException {
    Parametros(func, funcLlamada);
System.out.println("PARAM SIZE: " + TokenAsignaciones.getParamSize(funcLlamada) + " CONTPARAMS : " + TokenAsignaciones.getContParams());
            if(TokenAsignaciones.getParamSize(funcLlamada) != TokenAsignaciones.getContParams())
            {
                reiniciaTodo();
                {if (true) throw new ParseException("En la llamada a la funcion " + funcLlamada + " se enviaron menos parametros de los necesitados.");}
            }
            TokenAsignaciones.resetContParams();
  }

//////////////ESTATUTO/////////////////
  static final public void Estatuto(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      Asignacion(func);
      Estatuto2(func);
      break;
      }
    case READ:{
      Lectura(func);
      Estatuto2(func);
      break;
      }
    case WRITE:{
      Escritura(func);
      Estatuto2(func);
      break;
      }
    case RETURN:{
      Retorno(func);
      Estatuto2(func);
      break;
      }
    case IF:{
      Estatuto_De_Decision(func);
      Estatuto2(func);
      break;
      }
    case WHILE:{
      Condicional(func);
      Estatuto2(func);
      break;
      }
    case FOR:{
      No_condicional(func);
      Estatuto2(func);
      break;
      }
    case CALL:{
      Llamada(func);
      jj_consume_token(SEMICOLON);
      Estatuto2(func);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Estatuto2(Token func) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case IF:
    case WHILE:
    case FOR:
    case CALL:
    case ID:{
      Estatuto(func);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      Empty();
    }
  }

// un temporal del tipo correspondiente. Crea el cuadruplo con esos 4 elementos, y guarda el temporal en la pila del vector polaco.
  static final public void creaCuadruploExpBool(Token func) throws ParseException {Token op;
     Token arg1  = new Token();
     Token arg2  = new Token();
     Token tAux;
     Token tAux2;
     int aux;
     int aux2;
     Token temporal;
op = TokenAsignaciones.popPilaOP();
    tAux = TokenAsignaciones.popPilaVP();
    tAux2 = TokenAsignaciones.popPilaVP();

    arg1.image = tAux.image;
    arg1.kind = tAux.kind;

    arg2.image = tAux2.image;
    arg2.kind = tAux2.kind;
    temporal = op.newToken(op.kind);
    System.out.println("image: " + arg1 + " type: " + arg1.kind);
    System.out.println("image: " + arg2 + " type: " + arg2.kind);

    //Entra qui si el argumento es un temporal, porque su tipo
    if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 | arg1.kind == 38 | arg1.kind == 39 | arg1.kind == 41)
    {
        aux = arg1.kind;
    }
    else{
        aux = TokenAsignaciones.getType(arg1, func);
        }


    if (  arg2.kind == 4 | arg2.kind == 5 | arg2.kind == 6 | arg2.kind == 47 | arg2.kind == 38 | arg2.kind == 39 | arg2.kind == 41 )
        {
            aux2 = arg2.kind;
        }
        else{
            aux2 = TokenAsignaciones.getType(arg2, func);
            }

        if (aux == 47 & aux2 == 47)
            {
                temporal.kind = 47;
            }
        else
            {
                reiniciaTodo();
                {if (true) throw new ParseException("Los argumentos: " + arg1.image + " y " + arg2.image + " tienen que ser booleanos.");}
            }
        TokenAsignaciones.aumentaVarFuncTemporal(temporal.kind, func);


        System.out.println("aaaaaa: " + arg1.image);
        System.out.println("aaaaaa: " + arg2.image);

    ////////////////////////////////////////////////// Aqu√≠ cambia los tokens por sus direcciones antes de meterlos.

    arg1.image = tokenToDir(arg1, func);
    arg1.kind = aux;
    arg2.image = tokenToDir(arg2, func);
    arg2.kind = aux;


    temporal.image = String.valueOf(TokenAsignaciones.getContTemporal(temporal.kind));
    TokenAsignaciones.pushPilaVP(temporal);
    Quadruple quad = new Quadruple(op.image, arg1, arg2, temporal);
    TokenAsignaciones.meterCuadruplo(quad);
        TokenAsignaciones.subeContCuadruplos();

    //quad.print();

  }

//////////////EXPRESION/////////////////
  static final public Token Expresion(Token func) throws ParseException {Token var;
    var = T_Exp(func);
if (TokenAsignaciones.checkPilaOP("|"))
            {
                creaCuadruploExpBool(func);
            }
    Expresion2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void Expresion2(Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      var = jj_consume_token(OR);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      Expresion(func);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      Empty();
    }
  }

//////////////T_Exp/////////////////
  static final public Token T_Exp(Token func) throws ParseException {Token var;
    var = G_Exp(func);
if (TokenAsignaciones.checkPilaOP("&"))
                {

                    creaCuadruploExpBool(func);
                }
    T_Exp2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void T_Exp2(Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      var = jj_consume_token(AND);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      T_Exp(func);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      Empty();
    }
  }

//////////////G_Exp/////////////////
  static final public Token G_Exp(Token func) throws ParseException {Token var;
    var = M_Exp(func);
if (TokenAsignaciones.checkPilaOP("<") | TokenAsignaciones.checkPilaOP(">") | TokenAsignaciones.checkPilaOP("==") | TokenAsignaciones.checkPilaOP("!=") | TokenAsignaciones.checkPilaOP(">=") | TokenAsignaciones.checkPilaOP("<="))
               {
                   creaCuadruploExp(func);
               }
    G_Exp2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void G_Exp2(Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MENOSQUE:{
      var = jj_consume_token(MENOSQUE);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      G_Exp(func);
      break;
      }
    case MASQUE:{
      var = jj_consume_token(MASQUE);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      G_Exp(func);
      break;
      }
    case IGUAL:{
      var = jj_consume_token(IGUAL);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      G_Exp(func);
      break;
      }
    case NOIGUAL:{
      var = jj_consume_token(NOIGUAL);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      G_Exp(func);
      break;
      }
    case MAYORIGUAL:{
      var = jj_consume_token(MAYORIGUAL);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      G_Exp(func);
      break;
      }
    case MENORIGUAL:{
      var = jj_consume_token(MENORIGUAL);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      G_Exp(func);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      Empty();
    }
  }

//////////////M_Exp/////////////////
  static final public Token M_Exp(Token func) throws ParseException {Token var;
    var = T(func);
if (TokenAsignaciones.checkPilaOP("+") | TokenAsignaciones.checkPilaOP("-"))
        {
            creaCuadruploExp(func);
        }
    M_Exp2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void M_Exp2(Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAS:{
      var = jj_consume_token(MAS);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      M_Exp(func);
      break;
      }
    case MENOS:{
      var = jj_consume_token(MENOS);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      M_Exp(func);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      Empty();
    }
  }

//////////////T(TERMINO)/////////////////
  static final public Token T(Token func) throws ParseException {Token var;
    var = F(func);
if (TokenAsignaciones.checkPilaOP("*") | TokenAsignaciones.checkPilaOP("/"))
        {
            creaCuadruploExp(func);
        }
    T2(func);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

// Esta funci√≥n hace pop de la pila de operadores, y dos pops de la pila del vector polaco. Con esto llama al cubo Sem√°ntico para crear
// un temporal del tipo correspondiente. Crea el cuadruplo con esos 4 elementos, y guarda el temporal en la pila del vector polaco.
  static final public void creaCuadruploExp(Token func) throws ParseException {Token op;
     Token arg1  = new Token();
     Token arg2  = new Token();
     Token tAux;
     Token tAux2;
     int aux;
     int aux2;
     Token temporal;
op = TokenAsignaciones.popPilaOP();
    tAux = TokenAsignaciones.popPilaVP();
    tAux2 = TokenAsignaciones.popPilaVP();

    arg1.image = tAux.image;
    arg1.kind = tAux.kind;

    arg2.image = tAux2.image;
    arg2.kind = tAux2.kind;
    temporal = op.newToken(op.kind);
    System.out.println("image: " + arg1 + " type: " + arg1.kind);
    System.out.println("image: " + arg2 + " type: " + arg2.kind);

    //Entra qui si el argumento es un temporal, porque su tipo
    if ( arg1.kind == 4 | arg1.kind == 5 | arg1.kind == 6 | arg1.kind == 47 | arg1.kind == 38 | arg1.kind == 39 | arg1.kind == 41)
    {
        aux = arg1.kind;
    }
    else{
        aux = TokenAsignaciones.getType(arg1, func);
        }


    if (  arg2.kind == 4 | arg2.kind == 5 | arg2.kind == 6 | arg2.kind == 47 | arg2.kind == 38 | arg2.kind == 39 | arg2.kind == 41 )
        {
            aux2 = arg2.kind;
        }
        else{
            aux2 = TokenAsignaciones.getType(arg2, func);
            }

    temporal.kind = TokenAsignaciones.getCuboType(aux, aux2, op.image);

        TokenAsignaciones.aumentaVarFuncTemporal(temporal.kind, func);

    //System.out.println("temporal.kind: " + temporal.kind);

    if(temporal.kind == 0)
    {
        reiniciaTodo();
        {if (true) throw new ParseException("Los argumentos: " + arg1.image + " y " + arg2.image + " no son compatibles.");}
    }
        System.out.println("aaaaaa: " + arg1.image);
        System.out.println("aaaaaa: " + arg2.image);

    ////////////////////////////////////////////////// Aqu√≠ cambia los tokens por sus direcciones antes de meterlos.

    arg1.image = tokenToDir(arg1, func);
    arg1.kind = aux;
    arg2.image = tokenToDir(arg2, func);
    arg2.kind = aux;


    temporal.image = String.valueOf(TokenAsignaciones.getContTemporal(temporal.kind));
    TokenAsignaciones.pushPilaVP(temporal);
    Quadruple quad = new Quadruple(op.image, arg1, arg2, temporal);
    TokenAsignaciones.meterCuadruplo(quad);
        TokenAsignaciones.subeContCuadruplos();

    //quad.print();

  }

//Esta funci√≥n convierte un token a una direccion. Cambia su image de ej: b -> 1000
//Si el token es un temporal o constante, lo deja igual porque su image ya es la direcci√≥n
  static final public String tokenToDir(Token arg, Token func) throws ParseException {
switch (arg.kind)
                {
                    case 4:
                    case 5:
                    case 6:
                    case 47:
                    case 38:
                    case 39:
                    case 41:
                            {if ("" != null) return arg.image;}
                             break;
                    default: {if ("" != null) return String.valueOf(TokenAsignaciones.getDir(arg, func));}
                             break;
                }
    throw new Error("Missing return statement in function");
  }

  static final public void T2(Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULT:{
      var = jj_consume_token(MULT);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      T(func);
      break;
      }
    case DIV:{
      var = jj_consume_token(DIV);
TokenAsignaciones.pushPilaOP(var); System.out.println(TokenAsignaciones.returnPilaOP());
      T(func);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      Empty();
    }
  }

//////////////F(FACTOR)/////////////////
  static final public Token F(Token func) throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARENIZQ:{
      var = jj_consume_token(PARENIZQ);
TokenAsignaciones.pushPilaOP(var);
      var = Expresion(func);
      jj_consume_token(PARENDER);
TokenAsignaciones.popPilaOP();
{if ("" != null) return var;}
      break;
      }
    case ID:{
      var = Variable(func);
{if ("" != null) return var;}
      break;
      }
    case CALL:{
      //{System.out.println("LA PILA ANTES DE ENTRAR A LA LLAMADAAAAAAAAAAAAAAAAAAAAAAA: " + TokenAsignaciones.returnPilaVP());}
              var = Llamada(func);
{if ("" != null) return var;}
      break;
      }
    case CTEI:
    case CTEF:
    case CTEC:{
      var = F2();
{if ("" != null) return var;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token F2() throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CTEI:{
      var = jj_consume_token(CTEI);
var.image = TokenAsignaciones.InsertarConstante(var.image, TokenAsignaciones.getContConst(var.kind));
            TokenAsignaciones.pushPilaVP(var);
            {if ("" != null) return var;}
      break;
      }
    case CTEF:{
      var = jj_consume_token(CTEF);
var.image = TokenAsignaciones.InsertarConstante(var.image, TokenAsignaciones.getContConst(var.kind));
            TokenAsignaciones.pushPilaVP(var);
            {if ("" != null) return var;}
      break;
      }
    case CTEC:{
      var = jj_consume_token(CTEC);
var.image = TokenAsignaciones.InsertarConstante(var.image, TokenAsignaciones.getContConst(var.kind));
            TokenAsignaciones.pushPilaVP(var);
            {if ("" != null) return var;}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//////////////VACIO/////////////////
  static final public void Empty() throws ParseException {

  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8,0x1000000,0x70,0x8,0x0,0x0,0x0,0x0,0x1000000,0x70,0x100,0xf0,0xa9e00,0x100,0xf0,0xa9e00,0x70,0x1000000,0x180000,0x1000000,0x1000000,0x180000,0x1000000,0xa9e00,0x4000,0xa9e00,0x70,0xa9e00,0xa9e00,0xa9e00,0xa9e00,0x0,0x0,0x0,0x18000000,0x60000000,0x180000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x400,0x400,0x400,0x400,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x100,0x0,0x0,0x3c0,0x0,0x0,0x3c0,0x0,0x100,0x0,0x100,0x0,0x100,0x100,0x100,0x100,0x20,0x10,0x600f,0x0,0x0,0x3c0,0x2c0,};
   }

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new compTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
